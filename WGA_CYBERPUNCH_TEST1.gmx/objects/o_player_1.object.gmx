<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///var
status = 'none'
statuspos = 'none'
color = c_red
jump_speed = -15;
grav = 0.4
move_speed = 5;
target = noone
tmp = noone
fighter = instance_create(x,y,o_fighter_1);
height = 256
width = 128

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pos
draw_set_color(color);
switch statuspos 
{
    case 'sit':
    {
        if keyboard_check(vk_down)
        {
            draw_rectangle(x-width/2,y,x+width/2,y+height/2,1);
        }
        else
        {
            statuspos = 'none';   
        }
        break;        
    }
    case 'jump':
    {
        draw_rectangle(x-width/2,y+height/2,x+width/2,y-height/2,1);
        if y == ystart
        {
            vspeed = jump_speed
        }
        break;        
    }
    case 'left':
    {
        draw_rectangle(x-width/2,y+height/2,x+width/2,y-height/2,1);
        if x &gt; 0
        {
            x -= move_speed
            fighter.sprite_index = spr_fighter_walk_game; 
        }
        else
        {
            x = 0
        }
        if !keyboard_check(vk_left)
        {
            statuspos = 'none'    
        }
        break;        
    }
    case 'right':
    {
        draw_rectangle(x-width/2,y+height/2,x+width/2,y-height/2,1);
        if x &lt; room_width-128
        {
            x += move_speed
            fighter.sprite_index = spr_fighter_walk_game; 
        }
        else
        {
            x = room_width-128
        }
        if !keyboard_check(vk_right)
        {
            statuspos = 'none'    
        }
        break;        
    }
    default:
    {   
        draw_rectangle(x-width/2,y+height/2,x+width/2,y-height/2,1);
        break;
    }
}

//gravity
if y != ystart
{
    vspeed += grav
}
if y &gt; ystart
{
    vspeed = 0;
    y = ystart;
    statuspos = 'none'
}
if target.x &lt; x
{
    fighter.image_xscale = -1
}
else
{
    fighter.image_xscale = 1
}
fighter.x = x;
fighter.y = y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///hit
draw_set_color(c_red);
switch status 
{
    case 'a':
    {
        if target.x &lt; x
        {   
            tmp = instance_create(x-width,y,o_hit_game)
            tmp.mom = id
        }
        else
        {
            tmp = instance_create(x+width,y,o_hit_game)
            tmp.mom = id
        }
        status = 'hit'; 
        break;        
    }
    case 'b':
    {
        if target.x &lt; x
        {
            tmp = instance_create(x-width,y+height/4,o_hit_game)
            tmp.mom = id
        }
        else
        {
            tmp = instance_create(x+width,y+height/4,o_hit_game)
            tmp.mom = id
        }
        status = 'hit';   
        break;        
    }
    case 'x':
    {
        if target.x &lt; x
        {
            tmp = instance_create(x-width,y-height/3,o_hit_game)
            tmp.mom = id
        }
        else
        {
            tmp = instance_create(x+width,y-height/3,o_hit_game)
            tmp.mom = id
        }
        fighter.sprite_index = spr_fighter_headfirs_game;
        fighter.image_index = 0;
        fighter.image_speed = 0.2
        status = 'hit';   
        break;        
    }
    case 'y':
    {
        if target.x &lt; x
        {
            tmp = instance_create(x-width,y-height/4,o_hit_game)
            tmp.mom = id
        }
        else
        {
            tmp = instance_create(x+width,y-height/4,o_hit_game)
            tmp.mom = id
        }
        status = 'hit';   
        break;        
    }
    default:
    {   
            break;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
